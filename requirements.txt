numpy==1.24.0
pandas==1.5.3
matplotlib==3.6.3
seaborn==0.11.2
Pillow==9.5.0  # Pillow is the modern fork of PIL
scikit-learn==1.1.3
tensorflow==2.12.0  # Assuming TensorFlow 2.12.0 for compatibility
keras==2.6.0

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.cluster import KMeans

# Assuming your dataframe is called 'df' and has columns:
# 'question', 'comment', and 'keywords' (where 'keywords' contains the RAKE results)

# Step 1: Group by questions
grouped = df.groupby('question')

# Step 2: Process each group
results = []
for question, group in grouped:
    # Combine all keywords for this question into a single list
    all_keywords = [keyword for keywords in group['keywords'] for keyword in keywords]
    
    # Step 3: Apply clustering
    vectorizer = TfidfVectorizer()
    X = vectorizer.fit_transform(all_keywords)
    
    # You can adjust the number of clusters as needed
    kmeans = KMeans(n_clusters=5, random_state=42)
    cluster_labels = kmeans.fit_predict(X)
    
    # Create a dictionary of results for this question
    question_results = {
        'question': question,
        'keywords': all_keywords,
        'cluster_labels': cluster_labels
    }
    
    results.append(question_results)

# Print results to verify
for result in results:
    print(f"Question: {result['question']}")
    print(f"Number of keywords: {len(result['keywords'])}")
    print(f"Number of clusters: {len(set(result['cluster_labels']))}")
    print("Sample keywords and their clusters:")
    for keyword, cluster in zip(result['keywords'][:5], result['cluster_labels'][:5]):
        print(f"  {keyword}: Cluster {cluster}")
    print("\n")
