numpy==1.24.0
pandas==1.5.3
matplotlib==3.6.3
seaborn==0.11.2
Pillow==9.5.0  # Pillow is the modern fork of PIL
scikit-learn==1.1.3
tensorflow==2.12.0  # Assuming TensorFlow 2.12.0 for compatibility
keras==2.6.0


import matplotlib.pyplot as plt
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.decomposition import PCA
from collections import Counter
import random

def plot_two_keyword_columns(results):
    """
    For each entry in 'results':
      1) We'll vectorize & PCA each set of keywords separately.
      2) Plot them side by side: left subplot = Set1, right subplot = Set2.
      3) Each subplot color-codes clusters and annotates each point with the keyword text.
    """
    # Define a color palette for clusters (can expand or choose your own)
    color_choices = ["blue", "green", "red", "purple", "orange", "brown", "cyan"]

    for item in results:
        question        = item["question"]
        keywords_1      = item["keywords_1"]
        cluster_lbls_1  = item["cluster_labels_1"]
        keywords_2      = item["keywords_2"]
        cluster_lbls_2  = item["cluster_labels_2"]

        # --- Prepare figure with 2 subplots (side by side) ---
        fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(12, 6))
        fig.suptitle(f"Keyword Clusters for Question:\n{question}", fontsize=14)

        # ======================
        #  A) Plot for Set 1
        # ======================
        # 1. Vectorize
        tfidf_1 = TfidfVectorizer()
        X1 = tfidf_1.fit_transform(keywords_1)

        # 2. PCA to 2D
        pca_1 = PCA(n_components=2, random_state=42)
        coords_1 = pca_1.fit_transform(X1.toarray())

        # 3. Identify unique clusters
        unique_clusters_1 = sorted(set(cluster_lbls_1))

        # 4. For each cluster, scatter its points in a chosen color
        for c_id in unique_clusters_1:
            # Indices where cluster == c_id
            idx = [i for i, lbl in enumerate(cluster_lbls_1) if lbl == c_id]

            # Points & phrases
            pts = coords_1[idx]
            phs = [keywords_1[i] for i in idx]

            # Choose color (loop if more clusters than color_choices)
            color = color_choices[c_id % len(color_choices)]

            # Scatter
            ax1.scatter(pts[:, 0], pts[:, 1], color=color, alpha=0.7, label=f"Cluster {c_id}")

            # Annotate each point with its phrase
            for (x, y), phrase in zip(pts, phs):
                x_off = np.random.uniform(-0.005, 0.005)  # small random offset
                y_off = np.random.uniform(-0.003, 0.003)
                ax1.annotate(phrase, (x + x_off, y + y_off), fontsize=8)

        ax1.set_title("Column 1 Clusters")
        ax1.set_xlabel("PC1")
        ax1.set_ylabel("PC2")
        ax1.legend()

        # ======================
        #  B) Plot for Set 2
        # ======================
        # 1. Vectorize
        tfidf_2 = TfidfVectorizer()
        X2 = tfidf_2.fit_transform(keywords_2)

        # 2. PCA to 2D
        pca_2 = PCA(n_components=2, random_state=42)
        coords_2 = pca_2.fit_transform(X2.toarray())

        # 3. Identify unique clusters
        unique_clusters_2 = sorted(set(cluster_lbls_2))

        # 4. For each cluster, scatter its points
        for c_id in unique_clusters_2:
            idx = [i for i, lbl in enumerate(cluster_lbls_2) if lbl == c_id]

            pts = coords_2[idx]
            phs = [keywords_2[i] for i in idx]

            color = color_choices[c_id % len(color_choices)]

            # Scatter
            ax2.scatter(pts[:, 0], pts[:, 1], color=color, alpha=0.7, label=f"Cluster {c_id}")

            # Annotate
            for (x, y), phrase in zip(pts, phs):
                x_off = np.random.uniform(-0.005, 0.005)
                y_off = np.random.uniform(-0.003, 0.003)
                ax2.annotate(phrase, (x + x_off, y + y_off), fontsize=8)

        ax2.set_title("Column 2 Clusters")
        ax2.set_xlabel("PC1")
        ax2.set_ylabel("PC2")
        ax2.legend()

        # Final layout
        plt.tight_layout()
        plt.show()

